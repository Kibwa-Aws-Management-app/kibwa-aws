import boto3

class s3:
    def __init__(self, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION):
        self.s3_client = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_DEFAULT_REGION
        )
        self.s3_buckets = self.s3_client.list_buckets()['Buckets']

    # S3 버킷의 객체 잠금 상태를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_bucket_object_lock(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_versioning = self.s3_client.get_bucket_versioning(Bucket=bucket_name)

            if 'Status' in bucket_versioning and bucket_versioning['Status'] == 'Enabled':
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: 객체 잠금이 활성화되어 있습니다."})
            else:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: 객체 잠금이 활성화되어 있지 않습니다."})
        return results

    # S3 버킷의 정책 존재 여부를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_bucket_policy(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_policy = self.s3_client.get_bucket_policy(Bucket=bucket_name)

            if not bucket_policy:
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: 버킷 정책이 없습니다."})
            else:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: 버킷 정책이 있습니다."})
        return results
    
    # S3 버킷의 안전한 전송 정책 존재 여부를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_bucket_secure_transport_policy(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_policy = self.s3_client.get_bucket_policy(Bucket=bucket_name)

            if not bucket_policy:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: 안전하지 않은 전송에 대해 요청 거부하는 정책이 없습니다."})
            else:
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: 안전하지 않은 전송에 대해 요청 거부하는 정책이 있습니다."})
        return results

    # S3 버킷의 SSL 엔드포인트 사용 여부를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_ssl_endpoint(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_policy = self.s3_client.get_bucket_policy(Bucket=bucket_name)

            if not bucket_policy:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: S3 SSL 엔드포인트를 사용하지 않습니다."})
            else:
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: S3 SSL 엔드포인트를 사용하여 HTTPS를 통해 데이터를 전송할 수 있습니다."})
        return results

    # S3 버킷의 서버 측 암호화 상태를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_server_side_encryption(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_policy = self.s3_client.get_bucket_policy(Bucket=bucket_name)

            if not bucket_policy:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: x-amz-server-side-encryption(서버 측 암호화) 헤더가 포함되지 않는 경우, 객체 업로드 (S3:PutObject) 권한을 거부하고 있지 않습니다."})
            else:
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: x-amz-server-side-encryption(서버 측 암호화) 헤더가 포함되지 않는 경우, 객체 업로드 (S3:PutObject) 권한을 거부하고 있습니다."})
        return results

    # S3 버킷의 버전 관리 상태를 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_bucket_versioning(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_versioning = self.s3_client.get_bucket_versioning(Bucket=bucket_name)

            if 'Status' in bucket_versioning and bucket_versioning['Status'] == 'Enabled':
                results.append({"status": True, "info": f"S3 버킷 {bucket_name}: 버킷에 저장된 모든 객체 보존 및 복원이 (자동화) 되어 있습니다."})
            else:
                results.append({"status": False, "info": f"S3 버킷 {bucket_name}: 버킷에 저장된 모든 객체 보존 및 복원이 (자동화) 되어 있지 않습니다."})
        return results

    # S3 버킷의 ACL(Access Control List)을 확인하고 딕셔너리로 결과를 반환합니다.
    def check_s3_bucket_acl(self):
        results = []
        for bucket in self.s3_buckets:
            bucket_name = bucket['Name']
            bucket_acl = self.s3_client.get_bucket_acl(Bucket=bucket_name)

            all_accounts = ['http://acs.amazonaws.com/groups/global/AllUsers', 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers']
            
            for grant in bucket_acl.get('Grants', []):
                grantee = grant.get('Grantee', {}).get('URI', '')

                if grantee in all_accounts:
                    results.append({"status": False, "info": f"S3 버킷 {bucket_name}: 모든 S3 계정 수준에서 접근이 허용되고 있습니다."})
                else:
                    results.append({"status": True, "info": f"S3 버킷 {bucket_name}: 모든 S3 계정 수준에서 접근이 금지되어 있습니다."})
        return results
    
def s3_boto3(key_id, secret, region):
    s3 = s3(key_id, secret, region)  # 클래스의 인스턴스 생성

    check_list = get_check_list()
    result = []

    for method in check_list:
        if hasattr(s3, method):
            m = getattr(s3, method)
            if callable(m):
                buf = m()
                buf['check_name'] = method[4:].upper()
                # buf['check_name'] = str(method)
                result.append(buf)
            else:
                result.append({"check_name": None, "status": False, "info": "체크 함수를 실행시키는 과정에서 문제가 발생하였습니다."})
        else:
            result.append({"check_name": None, "status": False, "info": "AWS 연결에 문제가 발생하였습니다. 액세스 아이디와 키를 재설정 해주세요."})

    return result


def get_check_list(self):
    return [
        'check_s3_bucket_object_lock',
        'check_s3_bucket_policy',
        'check_s3_bucket_secure_transport_policy',
        'check_s3_ssl_endpoint',
        'check_s3_server_side_encryption',
        'check_s3_bucket_versioning',
        'check_s3_bucket_acl'
    ]
